# ===============================================
# Script to download Soil Water Index (SWI) 1km daily NetCDF files for June 2023,
# load the first downloaded file, and plot its first layer.
#
# Author: Dr. Elina Takola
# Date: 2025-07-01
# ===============================================

# Load required libraries
library(httr)    # For making HTTP requests to download files
library(terra)   # For working with raster spatial data and NetCDF files

# Step 1: Define the manifest URL that contains the list of all available SWI NetCDF files
manifest_url <- "https://globalland.vito.be/download/manifest/swi_1km_v1_daily_netcdf/manifest_clms_global_swi_1km_v1_daily_netcdf_latest.txt"

cat("Downloading manifest file...\n")

# Step 2: Download the manifest file (a text file containing URLs to all SWI NetCDF files)
res <- GET(manifest_url)             # Perform HTTP GET request
stop_for_status(res)                 # Stop script if download failed

# Step 3: Extract the content of the manifest file as a character string
manifest_text <- content(res, "text", encoding = "UTF-8")

# Step 4: Split the manifest text into individual file URLs by newline
file_urls <- strsplit(manifest_text, "\n")[[1]]

# Remove any empty lines that might be present
file_urls <- file_urls[nzchar(file_urls)]

cat("Found", length(file_urls), "SWI files listed in the manifest.\n")

# Step 5: Filter URLs to only include files from June 2023
target_month <- "202306"  # YYYYMM format for June 2023
selected_files <- file_urls[grepl(target_month, file_urls)]

cat("Number of files for", target_month, ":", length(selected_files), "\n")

# Step 6: Create a folder locally to save downloaded SWI files if it doesn't exist
download_folder <- "./swi_1km_files/"
dir.create(download_folder, showWarnings = FALSE)

# Step 7: Download each filtered file unless it already exists locally
for (url in selected_files) {
  file_name <- basename(url)  # Extract filename from URL
  dest_path <- file.path(download_folder, file_name)
  
  if (!file.exists(dest_path)) {
    cat("Downloading:", file_name, "...\n")
    download.file(url, destfile = dest_path, mode = "wb")  # 'wb' = write binary mode for NetCDF files
  } else {
    cat("File already downloaded:", file_name, "\n")
  }
}

# Step 8: Load the first downloaded NetCDF file into a SpatRaster object using terra
first_file <- file.path(download_folder, basename(selected_files[1]))
cat("Loading first NetCDF file:", first_file, "\n")

r <- rast(first_file)  # Load raster data

# Step 9: Print some basic information about the loaded raster
cat("Raster info:\n")
print(r)

cat("Number of layers in this raster:", nlyr(r), "\n")

# Step 10: Plot the first layer of the SWI raster
# The first layer usually corresponds to the first day or time slice in the dataset
plot(r[[1]], main = paste("SWI Layer 1 from", basename(first_file)),
     col = terrain.colors(100))  # Use a continuous color ramp for better visualization

# Optional: Extract raster values as a data frame with spatial coordinates
# Uncomment below lines if you want to inspect values in R
# values_df <- as.data.frame(r, xy = TRUE)
# head(values_df)

# End of script
